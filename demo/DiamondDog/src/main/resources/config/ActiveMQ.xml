<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jms="http://www.springframework.org/schema/jms"
	xmlns:amq="http://activemq.apache.org/schema/core" xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd
		http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">


	<!-- <bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor"> 
		核心线程数，默认为1 <property name="corePoolSize" value="5" /> 最大线程数，默认为Integer.MAX_VALUE 
		<property name="maxPoolSize" value="5" /> 队列最大长度，一般需要设置值>=notifyScheduledMainExecutor.maxNum；默认为Integer.MAX_VALUE 
		<property name="queueCapacity" value="1000" /> 线程池维护线程所允许的空闲时间，默认为60s <property 
		name="keepAliveSeconds" value="300" /> 线程池对拒绝任务（无线程可用）的处理策略，目前只支持AbortPolicy、CallerRunsPolicy；默认为后者 
		<property name="rejectedExecutionHandler"> AbortPolicy:直接抛出java.util.concurrent.RejectedExecutionException异常 
		CallerRunsPolicy:主线程直接执行该任务，执行完之后尝试添加下一个任务到线程池中，可以有效降低向线程池内添加任务的速度 DiscardOldestPolicy:抛弃旧的任务、暂不支持；会导致被丢弃的任务无法再次被执行 
		DiscardPolicy:抛弃当前任务、暂不支持；会导致被丢弃的任务无法再次被执行 <bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" 
		/> </property> </bean> -->
	<!-- <bean id="connectionFactory" class="org.springframework.jms.connection.CachingConnectionFactory"> 
		</bean> -->
	<!-- ActiveMQ 连接工厂 需要Xbean -->
	<!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供 -->
	<!-- 如果连接网络：tcp://ip:61616；未连接网络：tcp://localhost:61616 以及用户名，密码 -->
	<amq:connectionFactory id="amqConnectionFactory"
		brokerURL="tcp://localhost:61616" userName="admin" password="password" />
	<!-- Spring Caching连接工厂 -->
	<!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory -->
	<bean id="connectionFactory"
		class="org.springframework.jms.connection.CachingConnectionFactory">
		<!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory -->
		<property name="targetConnectionFactory" ref="amqConnectionFactory"></property>
		<!-- 同上，同理 -->
		<!-- <constructor-arg ref="amqConnectionFactory" /> -->
		<!-- Session缓存数量 -->
		<property name="sessionCacheSize" value="100" />
	</bean>



	<!-- Spring JmsTemplate 的消息生产者 start -->

	<!-- 定义JmsTemplate的Queue类型 -->
	<bean id="jmsQueueTemplate" class="org.springframework.jms.core.JmsTemplate">
		<!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->
		<constructor-arg ref="connectionFactory" />
		<!-- 非pub/sub模型（发布/订阅），即队列模式 -->
		<property name="pubSubDomain" value="false" />
	</bean>

	<!-- 定义JmsTemplate的Topic类型 -->
	<bean id="jmsTopicTemplate" class="org.springframework.jms.core.JmsTemplate">
		<!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->
		<constructor-arg ref="connectionFactory" />
		<!-- pub/sub模型（发布/订阅） -->
		<property name="pubSubDomain" value="true" />
	</bean>

	<!--Spring JmsTemplate 的消息生产者 end -->






	<!-- 消息消费者 start -->

	<!-- 定义Queue监听器 -->
	<jms:listener-container destination-type="queue"
		container-type="default" connection-factory="connectionFactory"
		acknowledge="auto">
		<jms:listener destination="test.queue" ref="queueReceiver1" />

		<jms:listener destination="test.queue" ref="queueReceiver2" />
		<jms:listener destination="test.queue1" ref="queueReceiver3"
			method="sendMessage" />
	</jms:listener-container>

	<!-- 定义Topic监听器 -->
	<jms:listener-container destination-type="topic"
		container-type="default" connection-factory="connectionFactory"
		acknowledge="auto">
		<jms:listener destination="test.topic" ref="topicReceiver1" />
		<jms:listener destination="test.topic" ref="topicReceiver2" />
	</jms:listener-container>

	<!-- 消息消费者 end -->









	<!-- <amq:connectionFactory id="connectionFactory" brokerURL="tcp://localhost:61616"/> 
		<amq:queue id="queue" physicalName="spitter.alert.queue" /> <bean id="spittleHandler" 
		class="com.habuma.spitter.alerts.SpittleAlertHandler" /> <jms:listener-container 
		connection-factory="connectionFactory"> <jms:listener destination="spitter.alert.queue" 
		ref="spittleHandler" method="processSpittle" /> </jms:listener-container> -->

</beans>
